import rospy
import numpy as np
from std_msgs.msg import UInt8 ,Float64
from geometry_msgs.msg import Twist
from pyniryo import *
import sys

class ControlLane():
    def __init__(self):
        self.sub_lane = rospy.Subscriber('/control/lane', Float64, self.cbFollowLane, queue_size = 1)
        self.sub_max_vel = rospy.Subscriber('/control/max_vel', Float64, self.cbGetMaxVel, queue_size = 1)
        self.pub_cmd_vel = rospy.Publisher('/control/cmd_vel', Twist, queue_size = 1)

        self.sub_aruco_distance = rospy.Subscriber('/aruco_distance', Float64, self.arucoCallBack, queue_size = 1)
        self.sub_niryo = rospy.Subscriber('/niryo_con', UInt8, self.niryoCallBack, queue_size = 1)
        self.pub_niryo = rospy.Publisher('/niryo_con', UInt8, queue_size=10)

        self.lastError = 0
        self.MAX_VEL = 0.1

        self.arucoflag = False
        self.niryoflag = True

        rospy.on_shutdown(self.fnShutDown)

    def arucoCallBack(self, msg):
        distance = msg.data
        if 0.4 < distance < 0.5:
            self.arucoflag = True
    
    def niryoCallBack(self, msg):
        if msg.data == 2:
            self.arucoflag = False
            self.niryoflag = False



    def cbGetMaxVel(self, max_vel_msg):
        self.MAX_VEL = max_vel_msg.data

    def cbFollowLane(self, desired_center):

        if self.stopped == False:
            center = desired_center.data

            error = center - 500

            Kp = 0.0025
            Kd = 0.007

            angular_z = Kp * error + Kd * (error - self.lastError)
            self.lastError = error
            
            twist = Twist()
            # twist.linear.x = 0.05        
            twist.linear.x = min(self.MAX_VEL * ((1 - abs(error) / 500) ** 2.2), 0.05)
            twist.linear.y = 0
            twist.linear.z = 0
            twist.angular.x = 0
            twist.angular.y = 0
            twist.angular.z = -max(angular_z, -2.0) if angular_z < 0 else -min(angular_z, 2.0)
            self.pub_cmd_vel.publish(twist)

            elif self.niryoflag:
                print("stopped for niryo")
                self.pub_niryo.publish(1)

            else:
                print("Niryo finished")
                self.arucoflag = True    

    def fnShutDown(self):
        rospy.loginfo("Shutting down. cmd_vel will be 0")

        twist = Twist()
        twist.linear.x = 0
        twist.linear.y = 0
        twist.linear.z = 0
        twist.angular.x = 0
        twist.angular.y = 0
        twist.angular.z = 0
        self.pub_cmd_vel.publish(twist) 

    def main(self):
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('control_lane')
    node = ControlLane()
    node.main() 
